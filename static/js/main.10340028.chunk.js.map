{"version":3,"sources":["App.js","index.js"],"names":["palette","randColour","THREE","min","max","length","Math","floor","random","App","props","ref","React","createRef","numBalls","animations","raycaster","mouse","addedEvents","eventName","element","listener","handlers","push","this","indexOf","addEventListener","event","preventDefault","x","clientX","renderer","domElement","clientWidth","y","clientY","clientHeight","setFromCamera","camera","intersects","intersectObjects","scene","children","object","forEach","handler","color","geometry","material","ball","shouldInit","add","bounceDistance","direction","factor","position","z","opacity","background","window","innerWidth","innerHeight","setSize","appendChild","skyColor","groundColour","hLight","dLight","set","target","floorGeometry","floorMaterial","rotation","addBall","animate","anim","render","requestAnimationFrame","PureComponent","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.10340028.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport * as THREE from \"three\";\nimport './App.css';\n\nconst randBetween = (min, max) => {\n  return Math.floor(Math.random() * (max + 1 - min)) + min;\n}\n\nconst palette = [\n  'rgb(142, 164, 210)',\n  'rgb(98,121,184)',\n  'rgb(162, 207, 166)',\n  'rgb(73,111,93)',\n  'rgb(98,121,184)',\n  'rgb(76,159,112)',\n];\n\nconst randColour = () => {\n  return new THREE.Color(palette[randBetween(0, palette.length - 1)]);\n}\n\nclass App extends PureComponent {\n\n  constructor(props) {\n    super(props);\n    this.ref = React.createRef();\n    this.numBalls = 0;\n    this.animations = [];\n    this.raycaster = new THREE.Raycaster();\n    this.mouse = new THREE.Vector2();\n    this.addedEvents = [];\n  }\n\n  addEventListener(eventName, element, listener) {\n    element.handlers = element.handlers || {};\n    element.handlers[eventName] = element.handlers[eventName] || [];\n    element.handlers[eventName].push(listener);\n\n    if (this.addedEvents.indexOf(eventName) === -1) {\n      this.addedEvents.push(eventName);\n      this.ref.addEventListener(eventName, (event) => {\n        event.preventDefault();\n\n        this.mouse.x = (event.clientX / this.renderer.domElement.clientWidth) * 2 - 1;\n        this.mouse.y = - (event.clientY / this.renderer.domElement.clientHeight) * 2 + 1;\n\n        this.raycaster.setFromCamera(this.mouse, this.camera);\n\n        const intersects = this.raycaster.intersectObjects(this.scene.children);\n\n        // run on all (should do this for the 'up' events)\n        //intersects.filter(inter => 'click' in inter.object).forEach(inter => inter.object.click());\n\n        // run just on the foremost\n        if (intersects.length > 0) {\n          if (intersects[0].object.handlers) {\n            intersects[0].object.handlers[eventName].forEach(handler => handler());\n          }\n        }\n      });\n    }\n  };\n\n  addBall(color) {\n    this.numBalls++;\n\n    const geometry = new THREE.SphereGeometry(1, 13, 13);\n\n    const material = new THREE.MeshPhongMaterial({\n      color: new THREE.Color(color || randColour())\n    });\n\n    const ball = new THREE.Mesh(geometry, material);\n    ball.shouldInit = true;\n\n    this.scene.add(ball);\n\n    ball.bounceDistance = 1;\n    const startingY = 1;\n\n    const animate = () => {\n\n      if (ball.shouldInit) {\n        ball.direction = 'down';\n        ball.factor = 0.03;\n        ball.position.x = 0;\n        ball.position.y = startingY;\n        ball.position.z = -5;\n        ball.shouldInit = false;\n      }\n      ball.factor += 0.001;\n\n      // Bounce\n      ball.position.y -= ball.factor;\n      if (ball.position.y > startingY + ball.bounceDistance) {\n        ball.direction = 'down';\n      } else if (ball.position.y < startingY) {\n        ball.direction = 'up';\n        ball.bounceDistance = 1;\n      }\n\n      if (ball.direction === 'up') {\n        ball.factor = -0.03;\n      } else {\n        //ball.factor = 0.03;\n      }\n\n      // Drift and fade away from camera (or towards if factor < 0)\n      material.opacity = (ball.position.z + 25) / 45;\n\n\n      if (ball.factor < 0 && ball.position.z > 5) {\n        // reverse direction if ball is coming towards us and gets too close\n        ball.factor = 0 - ball.factor;\n      }\n\n    };\n    // Push to animation queue\n    this.animations.push(animate);\n  }\n\n  componentDidMount() {\n    // Create basic scene\n    this.scene = new THREE.Scene();\n    this.scene.background = new THREE.Color(new THREE.Color('rgb(178, 212, 199)'));\n    this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    this.renderer = new THREE.WebGLRenderer();\n    this.renderer.setSize(window.innerWidth - 10, window.innerHeight - 10);\n    this.ref.appendChild(this.renderer.domElement);\n\n    // Add lighting\n    const skyColor = new THREE.Color('rgb(197, 219, 237)');\n    const groundColour = new THREE.Color('rgb(58, 65, 95)');\n    const intensity = 1;\n    const hLight = new THREE.HemisphereLight(skyColor, groundColour, intensity);\n    this.scene.add(hLight);\n\n    const color = new THREE.Color('rgb(125, 147, 198)');\n    const dLight = new THREE.DirectionalLight(color, intensity);\n    dLight.position.set(0, 10, 0);\n    dLight.target.position.set(-5, 0, 0);\n    this.scene.add(dLight);\n    this.scene.add(dLight.target);\n\n    this.camera.position.y = 5;\n    this.camera.position.z = 7;\n\n    const moveCamera = (change) => {\n      console.log(change);\n    }\n\n    // add floor\n    const floorGeometry = new THREE.BoxGeometry(10, 10, 0.1);\n    const floorMaterial = new THREE.MeshBasicMaterial({ color: randColour() });\n    const floor = new THREE.Mesh(floorGeometry, floorMaterial);\n    floor.position.y = 0;\n    floor.position.z = -4;\n    floor.rotation.x = 1.4;\n    this.scene.add(floor);\n\n    // Maybe animate light here?\n    this.addBall();\n\n    // Start animating and rendering.\n    const animate = () => {\n      this.animations.forEach(anim => anim());\n      // Now there's only 1 render no matter how many things are being animated\n      this.renderer.render(this.scene, this.camera);\n      requestAnimationFrame(animate);\n    };\n    animate();\n  }\n\n  render() {\n    return (\n      <div ref={ref => this.ref = ref}></div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}